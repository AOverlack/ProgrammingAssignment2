q()
q()
#Sample run:
makeCacheMatrix  <- function(x=matrix()){
inv <- function(y){
x<<-y
inc<<-NULL
}
get <- function() x
setinverse <- function(inverse) inv<<-inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x,...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cachede data")
return (inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x=rbind(c(1,-1/4),c(-1/4,1))
m=makeCacheMatrix(x)
makeCacheMatrix  <- function(x=matrix()){
inv <- NULL
set <- function(y){
x<<-y
inv<<-NULL
}
get <- function() x
setinverse <- function(inverse) inv<<-inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x,...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cachede data")
return (inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x=rbind(c(1,-1/4),c(-1,4,1))
rm(x)
x=rbind(c(1,-1/4),c(-1/4,1))
m=makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
rm(x)
rm(makeCacheMatrix)
rm(cacheSolve)
rm(m)
## This function creates persistent value storage for data and returned value for
## a matrix inversion routine so that inversion calculation can be limited
## to change of input data only. Prior calculated values are retrieved if still valid.
## It assumes that the input matrix is invertible.
makeCacheMatrix  <- function(x=matrix()){
inv <- NULL
set <- function(y){
x<<-y
inv<<-NULL
}
get <- function() x
setinverse <- function(inverse) inv<<-inverse
getinverse <- function() inv
## After specifying the sub-functions, they are combined in a list of functions
list(set=set, get=get, setinverse=setinverse,getinverse=getinverse)
}
## This part of the function retrieves the stored value of the inverted matrix if stored previously
## If the inverse matrix is present, it returns it,
## otherwise it calculates and stores it and then returns it.
cacheSolve <- function(x,...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return (inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x <- rbind(c(2,4),c(4,2))
m <- makecacheMatrix (x)
rm(x)
rm(cacheSolve,makeCacheMatrix)
makeCacheMatrix  <- function(x=matrix()){
inv <- NULL
set <- function(y){
x<<-y
inv<<-NULL
}
get <- function() x
setinverse <- function(inverse) inv<<-inverse
getinverse <- function() inv
## After specifying the sub-functions, they are combined in a list of functions
list(set=set, get=get, setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x,...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return (inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x <- rbind(c(2,4),c(4,2))
m <- makeCacheMatrix(m)
cacheSolve(m)
rm(x)
rm(cacheSolve,makeCacheMatrix)
rm(m)
makeCacheMatrix  <- function(x){
inv <- NULL
set <- function(y){
x<<-y
inv<<-NULL
}
get <- function() x
setinverse <- function(inverse) inv<<-inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x) {
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return (inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x <- rbind(c(1,-1/4),c(-1/4,1))
m <- makeCacheMatrix(x)
cacheSolve(m)
cacheSolve(m)
